var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// shared/schema.ts
var schema_exports = {};
__export(schema_exports, {
  contactSubmissions: () => contactSubmissions,
  insertContactSubmissionSchema: () => insertContactSubmissionSchema,
  insertUserSchema: () => insertUserSchema,
  users: () => users
});
import { pgTable, text, varchar, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
var users, contactSubmissions, insertUserSchema, insertContactSubmissionSchema;
var init_schema = __esm({
  "shared/schema.ts"() {
    "use strict";
    users = pgTable("users", {
      id: varchar("id").primaryKey(),
      username: text("username").notNull().unique(),
      password: text("password").notNull()
    });
    contactSubmissions = pgTable("contact_submissions", {
      id: varchar("id").primaryKey(),
      name: text("name").notNull(),
      email: text("email").notNull(),
      company: text("company"),
      message: text("message").notNull(),
      website: text("website"),
      // honeypot field
      submittedAt: timestamp("submitted_at").defaultNow().notNull()
    });
    insertUserSchema = createInsertSchema(users).pick({
      username: true,
      password: true
    });
    insertContactSubmissionSchema = createInsertSchema(contactSubmissions).pick({
      name: true,
      email: true,
      company: true,
      message: true,
      website: true
    }).extend({
      name: z.string().min(1, "Name is required"),
      email: z.string().email("Valid email is required"),
      message: z.string().min(5, "Message must be at least 5 characters"),
      company: z.string().optional(),
      website: z.string().optional()
    });
  }
});

// server/database.ts
var database_exports = {};
__export(database_exports, {
  getDb: () => getDb
});
import { drizzle } from "drizzle-orm/neon-http";
import { neon } from "@neondatabase/serverless";
function getDb() {
  if (!process.env.DATABASE_URL) {
    throw new Error("DATABASE_URL environment variable is required");
  }
  if (!db) {
    const sql = neon(process.env.DATABASE_URL);
    db = drizzle(sql, { schema: schema_exports });
  }
  return db;
}
var db;
var init_database = __esm({
  "server/database.ts"() {
    "use strict";
    init_schema();
    db = null;
  }
});

// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
init_schema();
import { randomUUID } from "crypto";
import { eq } from "drizzle-orm";
var DatabaseStorage = class {
  getDb() {
    const { getDb: getDb2 } = (init_database(), __toCommonJS(database_exports));
    return getDb2();
  }
  async getUser(id) {
    try {
      const db2 = this.getDb();
      const result = await db2.select().from(users).where(eq(users.id, id)).limit(1);
      return result[0] || void 0;
    } catch (error) {
      console.error("Database error in getUser:", error);
      throw error;
    }
  }
  async getUserByUsername(username) {
    try {
      const db2 = this.getDb();
      const result = await db2.select().from(users).where(eq(users.username, username)).limit(1);
      return result[0] || void 0;
    } catch (error) {
      console.error("Database error in getUserByUsername:", error);
      throw error;
    }
  }
  async createUser(insertUser) {
    try {
      const db2 = this.getDb();
      const id = randomUUID();
      const user = { ...insertUser, id };
      await db2.insert(users).values(user);
      return user;
    } catch (error) {
      console.error("Database error in createUser:", error);
      throw error;
    }
  }
  async createContactSubmission(insertSubmission) {
    try {
      const db2 = this.getDb();
      const id = randomUUID();
      const submissionData = {
        ...insertSubmission,
        id,
        company: insertSubmission.company || null,
        website: insertSubmission.website || null
      };
      console.log("Inserting contact submission to database:", submissionData);
      const result = await db2.insert(contactSubmissions).values(submissionData).returning();
      console.log("Successfully saved contact submission:", result[0]);
      return result[0];
    } catch (error) {
      console.error("Database error in createContactSubmission:", error);
      throw error;
    }
  }
  async getContactSubmissions() {
    try {
      const db2 = this.getDb();
      return await db2.select().from(contactSubmissions);
    } catch (error) {
      console.error("Database error in getContactSubmissions:", error);
      throw error;
    }
  }
};
var MemStorage = class {
  users;
  contactSubmissions;
  constructor() {
    this.users = /* @__PURE__ */ new Map();
    this.contactSubmissions = /* @__PURE__ */ new Map();
  }
  async getUser(id) {
    return this.users.get(id);
  }
  async getUserByUsername(username) {
    return Array.from(this.users.values()).find(
      (user) => user.username === username
    );
  }
  async createUser(insertUser) {
    const id = randomUUID();
    const user = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
  async createContactSubmission(insertSubmission) {
    const id = randomUUID();
    const submission = {
      ...insertSubmission,
      id,
      company: insertSubmission.company || null,
      website: insertSubmission.website || null,
      submittedAt: /* @__PURE__ */ new Date()
    };
    this.contactSubmissions.set(id, submission);
    return submission;
  }
  async getContactSubmissions() {
    return Array.from(this.contactSubmissions.values());
  }
};
var storage = process.env.DATABASE_URL ? new DatabaseStorage() : new MemStorage();
console.log(`Using ${process.env.DATABASE_URL ? "DatabaseStorage (PostgreSQL)" : "MemStorage (in-memory)"} for data persistence`);

// server/routes.ts
init_schema();

// server/services/sendgrid.ts
import { MailService } from "@sendgrid/mail";
if (!process.env.SENDGRID_API_KEY) {
  console.warn("SENDGRID_API_KEY environment variable not set - contact form emails will not be sent");
}
var mailService = new MailService();
if (process.env.SENDGRID_API_KEY) {
  mailService.setApiKey(process.env.SENDGRID_API_KEY);
}
async function sendEmail(params) {
  if (!process.env.SENDGRID_API_KEY) {
    console.log("Email would have been sent:", params);
    return true;
  }
  try {
    await mailService.send({
      to: params.to,
      from: params.from,
      subject: params.subject,
      text: params.text || "",
      html: params.html || ""
    });
    return true;
  } catch (error) {
    console.error("SendGrid email error:", error);
    return false;
  }
}

// server/routes.ts
var rateLimitMap = /* @__PURE__ */ new Map();
var RATE_LIMIT_WINDOW = 15 * 60 * 1e3;
var RATE_LIMIT_MAX_REQUESTS = 5;
function checkRateLimit(ip) {
  const now = Date.now();
  const rateLimitData = rateLimitMap.get(ip);
  if (!rateLimitData || now > rateLimitData.resetTime) {
    rateLimitMap.set(ip, { count: 1, resetTime: now + RATE_LIMIT_WINDOW });
    return true;
  }
  if (rateLimitData.count >= RATE_LIMIT_MAX_REQUESTS) {
    return false;
  }
  rateLimitData.count++;
  return true;
}
async function registerRoutes(app2) {
  app2.get("/sitemap.xml", (req, res) => {
    const baseUrl = req.get("host")?.includes("localhost") ? `http://${req.get("host")}` : "https://metrixmedia.com";
    const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>${baseUrl}/</loc>
    <lastmod>${(/* @__PURE__ */ new Date()).toISOString()}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>1.0</priority>
  </url>
</urlset>`;
    res.set("Content-Type", "application/xml");
    res.send(sitemap);
  });
  app2.get("/robots.txt", (req, res) => {
    const baseUrl = req.get("host")?.includes("localhost") ? `http://${req.get("host")}` : "https://metrixmedia.com";
    const robots = `User-agent: *
Allow: /

Sitemap: ${baseUrl}/sitemap.xml`;
    res.set("Content-Type", "text/plain");
    res.send(robots);
  });
  app2.post("/api/contact", async (req, res) => {
    try {
      const clientIp = req.ip || req.connection.remoteAddress || "unknown";
      if (!checkRateLimit(clientIp)) {
        return res.status(429).json({
          ok: false,
          message: "Too many requests. Please try again later."
        });
      }
      const result = insertContactSubmissionSchema.safeParse(req.body);
      if (!result.success) {
        return res.status(400).json({
          ok: false,
          message: "Invalid form data",
          errors: result.error.errors
        });
      }
      const { name, email, company, message, website } = result.data;
      if (website && website.trim() !== "") {
        return res.status(200).json({ ok: true });
      }
      await storage.createContactSubmission(result.data);
      const emailSuccess = await sendEmail({
        to: process.env.CONTACT_TO_EMAIL || "hello@metrixmedia.com",
        from: process.env.CONTACT_FROM_EMAIL || "noreply@metrixmedia.com",
        subject: `New Contact Form Submission from ${name}`,
        text: `
Name: ${name}
Email: ${email}
Company: ${company || "Not provided"}

Message:
${message}
        `,
        html: `
<h2>New Contact Form Submission</h2>
<p><strong>Name:</strong> ${name}</p>
<p><strong>Email:</strong> ${email}</p>
<p><strong>Company:</strong> ${company || "Not provided"}</p>
<p><strong>Message:</strong></p>
<p>${message.replace(/\n/g, "<br>")}</p>
        `
      });
      if (!emailSuccess) {
        console.error("Failed to send email notification");
      }
      res.json({ ok: true, message: "Thank you for your message! We'll get back to you soon." });
    } catch (error) {
      console.error("Contact form error:", error);
      res.status(500).json({
        ok: false,
        message: "Internal server error. Please try again later."
      });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      ),
      await import("@replit/vite-plugin-dev-banner").then(
        (m) => m.devBanner()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();